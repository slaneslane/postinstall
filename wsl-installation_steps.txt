# -------------------------------------------------------------
# Enable Developer Mode in Windows for symlincs to work:
# https://consumer.huawei.com/en/support/content/en-us15594140/
# -------------------------------------------------------------


WSL Installation:
------------------------

###########################
####### SYS UPGRADE #######
###########################

sudo apt update && sudo apt upgrade -y

sudo apt install -y vim tmux powerline fonts-powerline git tree mc curl wget net-tools apt-transport-https ca-certificates openssh-server python3-pip python3-venv unzip software-properties-common silversearcher-ag htop net-tools jq libxml2 ansible dconf-cli xsel xdg-utils

############################
####### GIT SETTINGS #######
############################

export GIT_DISCOVERY_ACROSS_FILESYSTEM=1

########################
####### SSL KEYS #######
########################

ssh-keygen -t rsa -b 4096
cat ~/.ssh/id_rsa.pub

##########################
####### MY CONFIGS #######
##########################

git clone git@github.com:slaneslane/scripts.git
git clone git@github.com:slaneslane/dotfiles.git
cd dotfiles/
git checkout vim_tests
rm .bashrc 
ln -s dotfiles/.bashrc .bashrc

######################
####### PYTHON #######
######################

sudo ln -s python3.8 /usr/bin/python

export PATH=$PATH:$HOME/.local/bin
echo $PATH
python -m pip install --upgrade pip
python -m pip install pep8 flake8
python -m pip install --upgrade autopep8

# install pretty-errors:
# https://www.youtube.com/watch?v=ncegz3E6LBs
python -m pip install pretty-errors
python -m pretty_errors

mkdir ~/.config
touch ~/.config/flake8
echo "[flake8]" > ~/.config/flake8
echo "max-line-length = 120" >> ~/.config/flake8

######################
####### GOLANG #######
######################

wget https://golang.org/dl/go1.17.1.linux-amd64.tar.gz
sudo tar -C /usr/local -xzf go1.17.1.linux-amd64.tar.gz
rm go1.17.1.linux-amd64.tar.gz
#export PATH=$PATH:/usr/local/go/bin # this is kept in my dotfiles/.exports

#########################
####### POWERLINE #######
#########################

# Hints for powerline in WSL and Windows Terminal
# https://medium.com/@hjgraca/style-your-windows-terminal-and-wsl2-like-a-pro-9a2e1ad4c9d0
# and:
# https://cloudlumberjack.com/posts/powerup-your-powershell-prompt/?utm_source=pocket_mylist

##########################
####### VIM & TMUX #######
##########################

ln -s dotfiles/.vimrc .vimrc
git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
vim +PluginInstall +qall
# map capslock to escape:
# https://vim.fandom.com/wiki/Map_caps_lock_to_escape_in_Windows?utm_source=pocket_mylist

ln -s dotfiles/.tmux.conf .tmux.conf
mkdir -p .tmux/plugins
git clone https://github.com/tmux-plugins/tpm .tmux/plugins/tpm

source ~/.bashrc

#######################
####### CP & MV #######
########################

mkdir download
cd download
wget http://ftp.gnu.org/gnu/coreutils/coreutils-8.32.tar.xz
tar xvJf coreutils-8.32.tar.xz 
rm coreutils-8.32.tar.xz 
cd coreutils-8.32/
wget https://raw.githubusercontent.com/jarun/advcpmv/master/advcpmv-0.8-8.32.patch
patch -p1 -i advcpmv-0.8-8.32.patch
./configure 
make
sudo cp src/cp /usr/local/bin/cp
sudo cp src/mv /usr/local/bin/mv
cd ~

#########################
####### TERRAFORM #######
#########################

sudo wget https://releases.hashicorp.com/terraform/1.0.7/terraform_1.0.7_linux_amd64.zip
unzip terraform_1.0.7_linux_amd64.zip
rm terraform_1.0.7_linux_amd64.zip
sudo mv terraform /usr/local/bin/
terraform --version

#########################
####### AZURE-CLI #######
#########################

# Install Azure-CLI
# https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-linux?pivots=apt
curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null
AZ_REPO=$(lsb_release -cs)
echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | sudo tee /etc/apt/sources.list.d/azure-cli.list

rm ~/.azure
cd ~
ln -s /c/Users/swlo/.azure .azure

######################
####### PACKER #######
######################

curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
sudo apt-get update && sudo apt-get install -y packer
packer --version

######################
####### DOCKER #######
######################

# https://dzone.com/articles/wsl2-for-dockerized-net-core-application-subhankar?utm_source=pocket_mylist
# https://nickjanetakis.com/blog/setting-up-docker-for-windows-and-wsl-to-work-flawlessly?utm_source=pocket_mylist
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update && apt-get install -y docker-ce
docker --version
#echo "export DOCKER_HOST=tcp://localhost:2375" >> ~/.bashrc && source ~/.bashrc # this is kept in my dotfiles/.exports
sudo usermod -aG docker $USER
sudo docker info

sudo docker run --rm hello-world
sudo docker images
sudo docker image rm hello-world

sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose --version

sudo vim /etc/wsl.conf
# Now make it look like this and save the file when you're done:
#[automount]
#root = /
#options = "metadata"

#######################
####### LXC/LXD #######
#######################

# Installing snapd and linux containers [ALSO SYSTEMD WILL BE INSTALLED]
# https://www.youtube.com/watch?v=SLDrvGUksv0

sudo apt-get update && sudo apt-get install -yqq daemonize dbus-user-session fontconfig
sudo daemonize /usr/bin/unshare --fork --pid --mount-proc /lib/systemd/systemd --system-unit=basic.target
exec sudo nsenter -t $(pidof systemd) -a su - $LOGNAME
snap version
sudo lxc list
sudo lxd init # use dir option for storing backend
sudo lxc launch ubuntu:20.04 x
sudo lxc exec x bash

# HINT: after restart Ubuntu wsl might be neccessary to do again:
#sudo daemonize /usr/bin/unshare --fork --pid --mount-proc /lib/systemd/systemd --system-unit=basic.target
#exec sudo nsenter -t $(pidof systemd) -a su - $LOGNAME

#############################
####### K8s & related #######
#############################

# !!! Systemd must be installed like it is done in LXC/LXD example

# kubectl
# https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-kubectl-binary-with-curl-on-linux
curl -LO "https://dl.k8s.io/release/v1.21.2/bin/linux/amd64/kubectl"
#curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl
mkdir -p ~/.kube
#ln -sf "/mnt/c/users/$windowsUser/.kube/config" ~/.kube/config
kubectl version

# k3s
# Note: k3s uses: local-path-provisioner and saves volume data in the /var/lib/rancher/k3s/data folder
curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.21.2+k3s1 sh -
# another option is to write kube config accessible for non root user (it's not needed here if next staeps are done)
# curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.21.2+k3s1 INSTALL_K3S_EXEC="--write-kube-config-mode 644" sh -

sudo cp /etc/rancher/k3s/k3s.yaml $HOME/.kube
sudo chown $USER $HOME/.kube/k3s.yaml
sudo k3s server # might fail as already running, port already in use
export KUBECONFIG=$HOME/.kube/config:$HOME/.kube/k3s.yaml
kubectl config use-context default
# to check if it's working:
kubectl get po --all-namespaces

# k9s
mkdir ~/docs && curl -s -L https://github.com/derailed/k9s/releases/download/v0.24.15/k9s_Linux_x86_64.tar.gz -o k9s && tar -xvf k9s && chmod 755 k9s && rm LICENSE && mv README.md ~/docs/k9s_README.md && sudo chown root: k9s && sudo mv k9s /usr/local/bin

############################
####### SYS CONFIG 2 #######
############################

# Also do the steps to have own user as default:
sudo vim /etc/wsl.conf
[user]
default=slane

# And before restarting change hostname in WSL:
# https://www.srccodes.com/change-hostname-ubuntu-microsoft-windows-subsystem-for-linux-wsl-wsl2-wsl-conf-unable-resolve-hosts-name-service-not-known-list-running-shutdown-vm-srccodes/
sudo vim /etc/wsl.conf
[network]
hostname=NEW_HOSTNAME
generateHosts=false
# + some additional steps in /etc/hosts (replace all occurrences)

# then execute the following command:
# wsl.exe --terminate <distro name>


# IT IS A GOOD PLACE TO MAKE A WSL BACKUP !!!!
# https://www.virtualizationhowto.com/2021/01/wsl2-backup-and-restore-images-using-import-and-export/?utm_source=pocket_mylist

# AFTER BACUPING SYSTEM REVERT WINDOWS TERMINAL SETTINGS TO:
#            {
#                "commandline": "wsl.exe -d UbuntuCustom",
#                "guid": "{07b6ba66-f3c1-4e0e-acfc-17ec39197462}",
#                "icon": "ms-appx:///ProfileIcons/{9acb9455-ca41-5af7-950f-6bca1bc9722f}.png",
#                "name": "Ubuntu",
#                "hidden": false,
#                "startingDirectory": "%USERPROFILE%",
#                "backgroundImage": "C:/Users/swlo/Pictures/linux.jpg",
#                "backgroundImageOpacity": 0.2,
#                "useAcrylic": true,
#                "acrylicOpacity": 0.8,
#                "colorScheme": "Tango Dark",
#                "fontFace": "Cascadia Code PL"
#            }
